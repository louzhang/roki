@model ChannelViewModel

@{
    ViewData["Title"] = Model.Guild.Name + " - Manage Channels";
}

<div x-data="{ isOpen: false }" class="container w-full lg:max-w-4xl mx-auto pt-3 sm:pt-4 dark:text-white mb-12">
    <div class="flex justify-between ml-4 md:ml-0">
        <div class="flex items-center">
            @if (string.IsNullOrWhiteSpace(Model.Guild.Icon))
            {
                <img class="w-10 rounded-full" src="https://ui-avatars.com/api/?name=@Model.Guild.Name" alt="=@Model.Guild.Name">
            }
            else
            {
                <img class="w-10 rounded-full" src="https://cdn.discordapp.com/icons/@Model.Guild.Id/@Model.Guild.Icon" alt="=@Model.Guild.Name">
            }
            <h1 class="pl-4 text-2xl font-medium tracking-tight">@Model.Guild.Name - Manage</h1>
        </div>
        <div class="mr-4 block md:hidden">
            <button @@click="isOpen = !isOpen" class="p-2 focus:outline-none">
                <svg class="block h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
                </svg>
            </button>
        </div>
    </div>
    <div class="mt-3" id="mobile-nav"
         x-show="isOpen"
         x-transition:enter="transition ease-out duration-300"
         x-transition:enter-start="opacity-0 transform scale-90"
         x-transition:enter-end="opacity-100 transform scale-100"
         x-transition:leave="transition ease-in duration-300"
         x-transition:leave-start="opacity-100 transform scale-100"
         x-transition:leave-end="opacity-0 transform scale-90">
        <nav class="dark:bg-gray-900">
            <div class="flex flex-none flex-col w-full">
                <div class="pl-2 py-2 dark:bg-gray-700 font-medium">Server Settings</div>
                <a class="pl-4 py-2 text-sm" href="/manage/@Model.Guild.Id">Core</a>
                <a class="pl-4 py-2 text-sm" href="/manage/@Model.Guild.Id#currency">Currency</a>
                <a class="pl-4 py-2 text-sm" href="/manage/@Model.Guild.Id#xp">Experience</a>
                <a class="pl-4 py-2 text-sm" href="/manage/@Model.Guild.Id#games">Games</a>
                <a class="pl-4 py-2 text-sm" href="/manage/@Model.Guild.Id#gambling">Gambling</a>
                <div class="pl-2 py-2 dark:bg-gray-700 font-medium">Channel Settings</div>
                <a class="pl-4 py-2 text-sm" href="/manage/@Model.Guild.Id/channels">Manage Channels</a>
                <div class="pl-2 py-2 dark:bg-gray-700 font-medium">Commands</div>
                <a class="pl-4 py-2 text-sm" href="#">Command Stuff</a>
            </div>
        </nav>
    </div>
    <div class="flex">
        <div class="md:w-80 hidden md:block">
            <nav class="md:sticky md:top-20 mr-2 mt-4 shadow-md">
                <div class="flex flex-none flex-col bg-gray-400 dark:bg-gray-700 w-60 rounded">
                    <div class="sidenav-header">Server Settings</div>
                    <a class="sidenav core" href="/manage/@Model.Guild.Id">Core</a>
                    <a class="sidenav currency" href="/manage/@Model.Guild.Id#currency">Currency</a>
                    <a class="sidenav xp" href="/manage/@Model.Guild.Id#xp">Experience</a>
                    <a class="sidenav games" href="/manage/@Model.Guild.Id#games">Games</a>
                    <a class="sidenav gambling" href="/manage/@Model.Guild.Id#gambling">Gambling</a>
                    <div class="sidenav-header">Channel Settings</div>
                    <a class="sidenav-active sidenav channels" href="/manage/@Model.Guild.Id/channels">Manage Channels</a>
                    <div class="sidenav-header">Commands</div>
                    <a class="py-2 pl-4 rounded-b hover:bg-gray-500 text-sm" href="#">Command Stuff</a>
                </div>
            </nav>
        </div>
        <div class="w-full pl-4 pr-4 md:pr-0 text-sm">
            <div class="settings container" id="core">
                <h1 class="text-3xl font-medium tracking-tight pt-3" id="channel-header">Channel Settings</h1>
                <div class="block" aria-hidden="true">
                    <div class="py-4">
                        <div class="border-t border-gray-200"></div>
                    </div>
                </div>
                <div class="overflow-hidden bg-grey-100 dark:bg-gray-900 px-4 pt-3 pb-4">
                    <div class="flex justify-between items-center">
                        <h1 class="text-base font-normal tracking-tight">Select Channel</h1>
                        <select class="form-select dark:bg-gray-700 dark:focus:ring-pink-900 dark:focus:border-pink-900 dark:border-gray-800 rounded-md border block w-40 truncate" id="channel_select" onchange="loadChannel()">
                            @foreach (Channel channel in Model.Channels)
                            {
                                <option class="max-w-40" title="@channel.Id" value="@channel.Id">#@channel.Name</option>
                            }
                        </select>
                    </div>
                    <form id="form-data" onchange="checkForm()" onsubmit="return false;" novalidate>
                        <div>
                            <div class="mt-4 flex justify-between">
                                <label class="input-label">Message Logging</label>
                                <label for="channel_logging" class="cursor-pointer mr-2">
                                    <div class="relative">
                                        <input id="channel_logging" type="checkbox" class="hidden" name="channel_logging">
                                        <div class="w-10 h-4 bg-gray-400 rounded-full shadow-inner"></div>
                                        <div class="toggle -top-1 -left-1 transition duration-300 ease-in-out absolute w-6 h-6 bg-white rounded-full inset-y-0 left-0"></div>
                                    </div>
                                </label>
                            </div>
                            <span class="input-help" id="channel-logging-help">Log all message activity in this channel.</span>
                        </div>
                        <div>
                            <div class="mt-4 flex justify-between">
                                <label class="input-label">Currency Generation</label>
                                <label for="channel_curr" class="cursor-pointer mr-2">
                                    <div class="relative">
                                        <input id="channel_curr" type="checkbox" class="hidden" name="channel_curr">
                                        <div class="w-10 h-4 bg-gray-400 rounded-full shadow-inner"></div>
                                        <div class="toggle -top-1 -left-1 transition duration-300 ease-in-out absolute w-6 h-6 bg-white rounded-full inset-y-0 left-0"></div>
                                    </div>
                                </label>
                            </div>
                            <span class="input-help" id="channel-curr-help">Currency will randomly spawn in channel.</span>
                        </div>
                        <div>
                            <div class="mt-4 flex justify-between">
                                <label class="input-label">XP Gain</label>
                                <label for="channel_xp" class="cursor-pointer mr-2">
                                    <div class="relative">
                                        <input id="channel_xp" type="checkbox" class="hidden" name="channel_xp">
                                        <div class="w-10 h-4 bg-gray-400 rounded-full shadow-inner"></div>
                                        <div class="toggle -top-1 -left-1 transition duration-300 ease-in-out absolute w-6 h-6 bg-white rounded-full inset-y-0 left-0"></div>
                                    </div>
                                </label>
                            </div>
                            <span class="input-help" id="channel-xp-help">Users can gain XP by typing in this channel.</span>
                        </div>
                        <div id="is-deleted">
                            <div class="mt-2 flex justify-between items-center">
                                <label class="input-label">Deleted Date</label>
                                <input id="deleted-date" type="text" class="dark:bg-gray-700 dark:focus:ring-pink-900 dark:focus:border-pink-900 dark:border-gray-800 rounded-md border disabled:opacity-50" disabled>
                            </div>
                            <span class="input-help" id="channel-deleted">If the channel was deleted on Discord, it is kept in Roki's database. This date is only recorded if the deletion happened when Roki was online.</span>
                        </div>
                        <div id="delete">
                            <div class="mt-2 flex justify-between items-center">
                                <label class="input-label">Delete Channel</label>
                                <button class="rounded dark:bg-red-800 focus:outline-none dark:hover:bg-red-900 dark:focus:ring-red-600 py-1.5 px-3 inline-flex" onclick="deleteChannel()">Delete</button>
                            </div>
                            <span class="input-help" id="channel-delete">Removes the channel from Roki's database. This removes ALL logged messages in this channel if logging was enabled. (Warning: this is permanent)</span>
                        </div>
                    </form>
                </div>
            </div>
            <div class="block fixed inset-x-0 -bottom-16 z-20 transition ease-in-out" id="save-modal" onclick="">
                <div class="flex justify-center">
                    <div class="bg-gray-600 lg:w-1/3 p-2 rounded shadow-md bg-opacity-95">
                        <div class="flex justify-between items-center">
                            <div class="pl-2 pr-4">You have unsaved changes.</div>
                            <div class="text-center inline-flex">
                                <button class="hover:underline mr-4 focus:outline-none focus:ring-0" onclick="resetForm()">Reset</button>
                                <button id="save" class="rounded dark:bg-pink-800 focus:outline-none dark:hover:bg-pink-900 dark:focus:ring-pink-600 py-1.5 px-3 inline-flex" onclick="submitForm()">
                                    <svg id="save-spinner" class="animate-spin -ml-1 mr-3 h-5 w-5 text-white text-center hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                    </svg>
                                    <div id="save-text">Save</div>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js"></script>
<script>
    // enable/disable save button when there are changes detected
    const form = document.getElementById("form-data");
    let formData = Object.fromEntries(new FormData(form).entries());
    const save = document.getElementById("save-modal");
    const saveButton = document.getElementById("save");
    const saveSpinner = document.getElementById("save-spinner");
    
    let channelData;
    const selectedChannel = document.getElementById("channel_select");
    const curr = document.getElementById("channel_curr");
    const logging = document.getElementById("channel_logging");
    const xp = document.getElementById("channel_xp");
    const dDate = document.getElementById("deleted-date");
    
    window.addEventListener("load", () => {
        loadChannel();
    });
    
    const _oldFetch = fetch; 
    // Create our new version of the fetch function
    window.fetch = function(){
    
        // Create hooks
        const fetchStart = new Event( "fetchStart", { "view": document, "bubbles": true, "cancelable": false } );
        const fetchEnd = new Event( "fetchEnd", { "view": document, "bubbles": true, "cancelable": false } );
    
        // Pass the supplied arguments to the real fetch function
        const fetchCall = _oldFetch.apply(this, arguments);
    
        // Trigger the fetchStart event
        document.dispatchEvent(fetchStart);
    
        fetchCall.then(function(){
            // Trigger the fetchEnd event
            document.dispatchEvent(fetchEnd);
        }).catch(function(){
            // Trigger the fetchEnd event
            document.dispatchEvent(fetchEnd);
        });
    
        return fetchCall;
    };
    
    function loadChannel() {
        _oldFetch(`/manage/@Model.Guild.Id/channels/${selectedChannel.value}`)
            .then(res => {
                return res.json()
            })
            .then(data => {
                channelData = data;
                curr.checked = data.currencyGen;
                logging.checked = data.logging;
                xp.checked = data.xpGain;
                if (data.deletedDate) {
                    dDate.value = new Date(data.deletedDate).toLocaleString();
                } else {
                    dDate.value = "Not Deleted";
                }
                formData = Object.fromEntries(new FormData(form).entries());
            })
            .then(() => {
                checkForm(); 
            })
            .catch(err => {
                console.error("error occured" + err);    
            });
    }

    function checkForm() {
        const newData = Object.fromEntries(new FormData(form).entries());      
        
        if (_.isEqual(formData, newData)) {
            save.classList.remove("transform", "-translate-y-20");
            save.classList.add("transform", "translate-y-20");
            setTimeout(() => {save.classList.remove("transform", "translate-y-20");}, 200);
        } else {
            save.classList.add("transform", "-translate-y-20");
        } 
    }
    
    function submitForm() {
        const data = Object.fromEntries(new FormData(form).entries());
        saveSpinner.classList.remove("hidden");
        fetch(`/manage/@Model.Guild.Id/channels/${selectedChannel.value}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(data)
        })
            .then(res => {
                if (res.ok) {
                    formData = data;
                }
            })
            .catch((err) => {
                console.log("Error: " + err);
            });
    }
    
    function resetForm(){
        if (channelData != null){
            curr.checked = channelData.currencyGen;
            logging.checked = channelData.logging;
            xp.checked = channelData.xpGain;
            checkForm();
            saveSpinner.classList.add("hidden");
        }
    }
    
    function deleteChannel() {
        confirm("Not yet implemented");
    }
    
    document.addEventListener("fetchEnd", async function() {
        await new Promise(r => setTimeout(r, 500));
        checkForm();
        saveSpinner.classList.add("hidden");
    });
</script>